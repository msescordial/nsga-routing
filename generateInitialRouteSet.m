% A route set S0 is generated with these assumptions:
% --- S0 is generated by selecting s candidate routes at random.
% --- All s routes in S0 must contain all nodes or bus stops

% Inputs:
%  1. netCostMatrix - n-by-n matrix 
%  2. BusRouteID - 3-column cell array
%           (1st column: ID, 2nd column: Route, 3rd column: Cost
%  3. TotalNoOfRoutes - scalar; total no. of routes generated using
%           k-shortest paths
%  4. s - no. of routes in the network
%  5. min_route_length - scalar; minimum route length constraint
%  6. max_route_length - scalar; maximum route length constraint
% Outputs:
%  1. S0 - column vector of route IDs
%  2. S0r - cell array of route set
% -------------------------------------------------------------------------

function [S0,S0r] = generateInitialRouteSet(netCostMatrix, BusRouteID, TotalNoOfRoutes, s, min_route_length, max_route_length)
        
    n = size(netCostMatrix,1);
    stop = 0;

    %% Start of Main Loop    
    while (stop == 0)

        A = zeros(1,n);
        for i=1:n
            A(1,i) = i;                 % all bus stops
        end

        % Initialize S0 (initial solution)
        S0 = [];                            
        S0r = [];

        a = 1;

        while (a <= s)    
            %% generate random route
            if (a == 1)        
                r = randi([1,TotalNoOfRoutes],1);    
                final_route = BusRouteID{r,2};
            else
                stop2 = 0;
                while (stop2 == 0)
                    r = randi([1,TotalNoOfRoutes],1);     
                    route = BusRouteID{r,2};
                    p1 = ismember(nonzeros(A),nonzeros(route));
                    if (sum(p1) >= 1)    
                        %disp("nonzeros(A)"); disp(nonzeros(A));
                        %disp("nonzeros(route)"); disp(nonzeros(route));
                        final_route = route;
                        stop2 = 1;
                    end
                    if ((a~= 1) & (sum(A) == 0)) 

                        final_route = route;
                        stop2 = 1;
                    end
                end
            end
            %disp("final_route"); disp(final_route)

            %% 
            p2 = ismember(A,nonzeros(final_route));
            for i = 1:length(p2)
                if (p2(i) == 1)
                    A(1,i) = 0;
                end
            end

            %% route length constraint
            fr = length(nonzeros(final_route));
            if ((fr >= min_route_length) && (fr <= max_route_length))  
                S0(a,1) = r;                % S0 is composed of these s bus route IDs
                S0r{a,1} = final_route;     % S0r is composed of these s bus routes
                a = a + 1;
            end

        end

        %% Checking if all bus stops are in at least one bus route
        D = zeros(1,n);
        B = zeros(s,n);
        for i=1:n
            D(i) = i;                 % all bus stops
        end
        for i=1:s
            B(i,:) = S0r{i,1};        % all bus routes
        end
        c = ismember(D,B);
        if ((n-sum(c)) == 0)
            %disp("Routes:"); disp(S0r); %displayInitialRouteSet(S0,BusRouteID);
            fprintf('\ngenerating possible route set...');
            stop = 1;
        end
    end
end


